name: 2-update-readme-with-github-repositories-details
# Update the README with the details of the GitHub repositories

# Workflow triggered using GitHub CLI at the end of the execution of the update-gihub-repositories-details workflow - but can also be triggered manually without input parameters
on:
  workflow_dispatch:

# Concurrency configuration for the current workflow - Keep only the latest workflow queued for the considered group and the considered issue
concurrency:
  group: update-readme-with-github-repositories-details
  cancel-in-progress: true

jobs:
  update-readme-with-github-repositories-details:
    runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1
    
    steps:
      # Action used to checkout the main branch in the current repository
      #   Community action: https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@v4.0.0

      # Set a current date environment variable in the following format: YYYYMMDD
      - name: Set current date as env variable
        id: current_date
        run: echo "NOW=$(date +'%Y%m%d')" >> $env:GITHUB_OUTPUT
        shell: pwsh

      # Set the name of the current day in the week as a variable
      - name: Set the name of the current day in the week as env variable
        id: current_day_in_the_week
        run: echo "DAY=$(date +'%A')" >> $env:GITHUB_OUTPUT
        shell: pwsh

      # Update summary and repositories opened to contributions in README
      - name: Update summary and repositories opened to contributions
        run: |
          Write-Host "/********************************************************************************/"
          Write-Host "Install required modules"
          Import-Module .\Scripts\Write-MarkdownSection.ps1 -Force
          Import-Module .\Scripts\ConvertTo-MarkdownTable.ps1 -Force

          Write-Host "/********************************************************************************/"
          Write-Host "Get search criteria details"
          $topics = Get-Content -Path "${{ vars.CONFIGURATION_FILE_PATH }}" | ConvertFrom-Json
          
          Write-Host "Get repositories details"
          $repositoriesDetails = Get-Content -Path "${{ vars.DATA_FILE_PATH }}" | ConvertFrom-Json

          Write-Host "/********************************************************************************/"
          Write-Host "Update summary"

          # Get the number of repositories referenced
          $repositoriesCount = $repositoriesDetails.count

          # Get the number of opened good first issues in the referenced repositories
          $openedGoodFirstIssuesCount = $repositoriesDetails | Where-Object { $_.openedGoodFirstIssues -gt 0 } | Measure-Object | Select-Object -ExpandProperty Count

          # Get the number of opened help wanted issues in the referenced repositories
          $openedHelpWantedIssuesCount = $repositoriesDetails | Where-Object { $_.openedHelpWantedIssues -gt 0 } | Measure-Object | Select-Object -ExpandProperty Count

          # Get the percentage of referenced repositories with security policy enabled
          $securityPolicyEnabledPercentage = [math]::Round(($repositoriesDetails | Where-Object { $_.isSecurityPolicyEnabled -eq $true } | Measure-Object | Select-Object -ExpandProperty Count) / $repositoriesCount * 100)

          # Configure summary badges
          $repositoriesCountBadgeUrl = "https://img.shields.io/badge/Repositories-$repositoriesCount-violet"
          $openedGoodFirstIssuesCountBadgeUrl = "https://img.shields.io/badge/Good_First_Issues-$openedGoodFirstIssuesCount-green"
          $openedHelpWantedIssuesCountBadgeUrl = "https://img.shields.io/badge/Help_Wanted_Issues-$openedHelpWantedIssuesCount-blue"
          $securityPolicyEnabledPercentageBadgeUrl = "https://img.shields.io/badge/Security_Policy_Enabled_Percentage-$securityPolicyEnabledPercentage-orange"

          # Center the summary badges
          $summaryBadgesCentered = "<h3 align='center'>`n"
          $summaryBadgesCentered += "  <img alt='Repositories Count Badge' src='$repositoriesCountBadgeUrl'>`n"
          $summaryBadgesCentered += "  <img alt='Opened Good First Issues Count Badge' src='$openedGoodFirstIssuesCountBadgeUrl'>`n"
          $summaryBadgesCentered += "  <img alt='Opened Help Wanted Issues Count Badge' src='$openedHelpWantedIssuesCountBadgeUrl'>`n"
          $summaryBadgesCentered += "  <img alt='Security Policy Enabled Percentage Badge' src='$securityPolicyEnabledPercentageBadgeUrl'>`n"
          $summaryBadgesCentered += "</h3>`n`n"

          # Concatenate the topics property in the configuration file as static badges
          foreach ($topic in $topics)
          {
            $topicName = $topic.topic
            # If the topic name contains a dash, replace it with 2 dashes
            $badgeContent = $topicName.Replace("-", "--")

            # Generate a random number between 0 and 16777215 (FFFFFF in hexadecimal)
            $randomNumber = Get-Random -Minimum 0 -Maximum 16777215

            # Convert the random number to a hexadecimal color value without the leading #
            $hexColor = "{0:X6}" -f $randomNumber

            $topicBadgeUrl = "https://img.shields.io/badge/$badgeContent-$hexColor"
            $topicBadge = "  <img alt='$topicName Badge' src='$topicBadgeUrl'>"
            $listOfTopics += $topicBadge + "`n"
          }

          # Center the list of topics
          $listOfTopicsCentered = "<p align='center'>`n"
          $listOfTopicsCentered += "$listOfTopics"
          $listOfTopicsCentered += "</p>"

          # Summary content composed of the summary badges and the list of topics
          $summaryContent = $summaryBadgesCentered + $listOfTopicsCentered

          Write-MarkdownSection -MarkdownFilePath ".\README.md" -SectionIdentifier "summary" -SectionContent $summaryContent

          Write-Host "/********************************************************************************/"
          Write-Host "Update list of repositories opened to contributions"

          # Get the list of repositories opened to contributions - with good first issues or help wanted issues
          $repositoriesOpenedToContributions = $repositoriesDetails | Where-Object { $_.hasGoodFirstIssues -eq $true -or $_.hasHelpWantedIssues -eq $true }

          # Order the list of repositories opened to contributions by the number of opened to contribution issues descendant
          $repositoriesOpenedToContributions = $repositoriesOpenedToContributions | Sort-Object -Property openedToContributionsIssues -Descending

          # Select of properties in the list of repositories opened to contributions
          $repositoriesOpenedToContributions = $repositoriesOpenedToContributions | Select-Object @{Name="fullNameAndUrl";Expression={"[" + $_.fullName + "](" + $_.url + ")"}}, description, language, @{Name="licenseAndUrl";Expression={"[" + $_.license.name + "](" + $_.license.url + ")"}}, openedGoodFirstIssues, openedHelpWantedIssues, @{Name="codeOfConductDirectLink";Expression={"[Code of Conduct](" + $_.codeOfConduct.url + ")"}}, @{Name="latestReleaseAndUrl";Expression={"[" + $_.latestRelease.tagName + "](" + $_.latestRelease.url + ")"}}, @{Name="securityPolicy";Expression={if ($_.isSecurityPolicyEnabled -eq $true) {"[" + $_.latestRelease.name + "](" + $_.latestRelease.url + ")"} else {"No"}}}
        shell: pwsh

      # If the current day in the week is Monday, update the list of top growing repositories
      - name: Update list of top growing repositories
        if: ${{ steps.current_day_in_the_week.outputs.DAY == 'Monday' }}
        run: |
          Write-Host "Current day of the week: ${{ steps.current_day_in_the_week.outputs.DAY }}"
          Write-Host "/********************************************************************************/"
          Write-Host "Install required modules"
          Import-Module .\Scripts\Write-MarkdownSection.ps1 -Force

          Write-Host "/********************************************************************************/"
          Write-Host "Get repositories details"
          $repositoriesDetails = Get-Content -Path "${{ vars.DATA_FILE_PATH }}" | ConvertFrom-Json

          Write-Host "/********************************************************************************/"
          Write-Host "Update the list of top growing repositories"
          # Update the growing counter for each repository to do in the update-github-repositories-details workflow - Refresh of the base every Tuesday
        shell: pwsh

      # Push the changes in the current repository
      - name: Push changes
        run: |
          git config --global user.name 'action@github.com'
          git config --global user.email 'GitHub Action'

          git add --all
          git commit -m "Summary and repositories opened to contributions sections in README updated - ${{ steps.current_date.outputs.NOW }}.${{ github.run_number }}"
          git -c http.extraheader="AUTHORIZATION: Bearer ${{ secrets.GITHUB_TOKEN }}" push origin main
        shell: pwsh